import type { AxiosRequestConfig } from "axios";

export type ApiFilter = Record<string, any> | URLSearchParams | undefined;

export type ApiOptions = AxiosRequestConfig & {
	pagination?: IPaginationOptions;
	populate?: string;
	filter?: ApiFilter;
	sort?: string;
	staleTime?: number;
};

export type ApiStatus = "error" | "loading" | "success" | "idle";

export type ApiPagination = {
	current_page: number;
	total_pages: number;
	total_items: number;
	page_size: number;
	next_page?: number;
	prev_page?: number;
};

export interface AccessTokenInfo {
	access_token: string;
	expiredTimestamp: number;
	expiredDate: Date;
	expiredDateGTM7: string;
}

export interface ApiResponse<T = any> extends ApiPagination {
	status: number;
	data: T;
	messages: string[];
	token?: AccessTokenInfo;
}

export interface IGeneral {
	/**
	 * Alias of `_id` MongoDB
	 */
	id?: string;
	/**
	 * MongoDB `ID`
	 */
	_id?: string;
	/**
	 * A unique slug of this instance
	 */
	slug?: string;
	createdAt?: string;
	updatedAt?: string;
	createdBy?: string;
	metadata?: any;
	/**
	 * User ID of the owner
	 *
	 * @remarks This can be populated to {User} data
	 */
	owner?: any;
	/**
	 * ID of the workspace
	 *
	 * @remarks This can be populated to {Workspace} data
	 */
	workspace?: any;
}

export interface IPaginationOptions {
	page?: number;
	size?: number;
	skip?: number;
	limit?: number;
}

export interface WorkspaceApiAccessToken {
	/**
	 *
	 */
	name: string;

	/**
	 *
	 */
	slug?: string;

	/**
	 *
	 */
	token: string;

	/**
	 *
	 */
	roles?: IRole[];
}

export interface IWorkspace extends IGeneral {
	/**
	 * Workspace name
	 */
	name?: string;

	/**
	 * Workspace slug: auto-generated by "name" column
	 * @readonly
	 */
	slug?: string;

	/**
	 * Workspace profile picture
	 */
	image?: string;

	/**
	 * Workspace domain name
	 */
	domain?: string;

	/**
	 * User ID of the owner
	 *
	 * @remarks This can be populated to {User} data
	 */
	owner?: IUser | string;

	/**
	 * List of this workspace's API Access Token
	 */
	apiAccessTokens?: WorkspaceApiAccessToken[];
}

export interface IRole extends IGeneral {
	name?: string;
	image?: string;

	/**
	 * ID of the project
	 *
	 * @remarks This can be populated to {Project} data
	 */
	project?: IProject | string;

	/**
	 * User ID of the owner
	 *
	 * @remarks This can be populated to {User} data
	 */
	owner?: IUser | string;

	/**
	 * ID of the workspace
	 *
	 * @remarks This can be populated to {Workspace} data
	 */
	workspace?: IWorkspace | string;
}

export interface ITeam extends IGeneral {
	name?: string;

	image?: string;

	/**
	 * ID of the project
	 *
	 * @remarks This can be populated to {Project} data
	 */
	project?: IProject | string;

	/**
	 * User ID of the owner
	 *
	 * @remarks This can be populated to {User} data
	 */
	owner?: IUser | string;

	/**
	 * ID of the workspace
	 *
	 * @remarks This can be populated to {Workspace} data
	 */
	workspace?: IWorkspace | string;
}

export interface IProviderInfo {
	name: string;
	user_id?: string;
	access_token?: string;
}

export interface IUser extends IGeneral {
	/**
	 * User name
	 */
	name?: string;

	/**
	 * User's type
	 */
	type?: "user" | "service_account" | "api_key_user";

	/**
	 * Unique username of a user
	 * This equavilent with "slug"
	 */
	username?: string;

	/**
	 * User email address
	 */
	email?: string;

	/**
	 * Is this user's email or phone verified?
	 */
	verified?: boolean;

	/**
	 * User profile picture URL
	 */
	image?: string;

	/**
	 * List of Cloud Providers which this user can access to
	 */
	providers?: IProviderInfo[];

	/**
	 * User password (hashed)
	 */
	password?: string;

	/**
	 * User token
	 */
	token?: AccessTokenInfo;

	/**
	 * User's roles
	 */
	roles?: IRole[] | string[];

	/**
	 * User's team IDs which this user is a member
	 */
	teams?: ITeam[] | string[];

	/**
	 * List of workspace IDs which this user is a member
	 */
	workspaces?: IWorkspace[];
}

export interface IServiceAccount extends IUser {}

export interface IGitProvider extends IGeneral {
	name?: string;

	host?: string;

	gitWorkspace?: string;

	repo?: {
		url?: string;
		sshPrefix?: string;
	};

	/**
	 * User ID of the owner
	 *
	 * @remarks This can be populated to {User} data
	 */
	owner?: IUser | string;

	/**
	 * ID of the workspace
	 *
	 * @remarks This can be populated to {Workspace} data
	 */
	workspace?: IWorkspace | string;
}

export interface IFramework extends IGeneral {
	name?: string;

	host?: string;

	/**
	 * ID of the Git Provider
	 *
	 * @remarks This can be populated to {GitProvider} data
	 */

	git?: IGitProvider;

	repoURL?: string;

	repoSSH?: string;

	mainBranch?: string;

	/**
	 * Number of downloads
	 */
	downloads?: number;

	/**
	 * ID of the project
	 *
	 * @remarks This can be populated to {Project} data
	 */
	project?: IProject | string;

	/**
	 * User ID of the owner
	 *
	 * @remarks This can be populated to {User} data
	 */
	owner?: IUser | string;

	/**
	 * ID of the workspace
	 *
	 * @remarks This can be populated to {Workspace} data
	 */
	workspace?: IWorkspace | string;
}

export interface IContainerRegistry extends IGeneral {
	name?: string;
	slug?: string;

	/**
	 * The host (domain) of your container registry which you are using.
	 * @example
	 * - gcr.io
	 * - asia.gcr.io
	 * - azurecr.io
	 */
	host?: string;

	/**
	 * Base URL of the image, usually is the registry host URI combines with something else.
	 * - This will be used to combine with your project/app image path.
	 * @example
	 * asia.gcr.io/project-id-here
	 */
	imageBaseURL?: string;

	/**
	 * Provider's "shortName"
	 */
	provider?: string;

	// @Column()
	// serviceAccount?: string;

	imagePullingSecret?: {
		name?: string;
		value?: string;
	};

	/**
	 * User ID of the owner
	 *
	 * @remarks This can be populated to {User} data
	 */
	owner?: IUser | string;

	/**
	 * ID of the workspace
	 *
	 * @remarks This can be populated to {Workspace} data
	 */
	workspace?: IWorkspace | string;
}

export interface KubeEnvironmentVariable {
	name: string;
	value: string;
}

export interface DiginextEnvironmentVariable {
	name: string;
	value: string;
	/**
	 * @default "string"
	 */
	type?: "string" | "secret";
}

export interface IAppEnvironment {
	/**
	 * Container registry slug
	 */
	registry?: string;
	/**
	 * Cloud provider's short name
	 */
	provider?: string;
	/**
	 * Cluster's short name
	 */
	cluster?: string;
	/**
	 * [Google Cloud] PROJECT_ID
	 */
	project?: string;
	/**
	 * [Google Cloud] Region
	 */
	region?: string;
	/**
	 * [Google Cloud] Zone
	 */
	zone?: string;

	/**
	 * Image URI of this app on the Container Registry.
	 * - Combined from: `<registry-image-base-url>/<project-slug>/<app-name-in-slug-case>`
	 * - No `tag` version at the end! (eg. `latest`, `beta`,...)
	 * @example
	 * asia.gcr.io/google-project-id/my-project-slug/my-app-slug
	 */
	imageURL?: string;

	/**
	 * Destination namespace name
	 */
	namespace?: string;
	/**
	 * Container quota resources
	 * @example
	 * "none" - {}
	 * "1x" - { requests: { cpu: `50m`, memory: `256Mi` }, limits: { cpu: `50m`, memory: `256Mi` } }
	 * "2x" - { requests: { cpu: `100m`, memory: `512Mi` }, limits: { cpu: `100m`, memory: `512Mi` } }
	 */
	size?: "none" | "1x" | "2x" | "3x" | "4x" | "5x" | "6x" | "7x" | "8x" | "9x" | "10x";
	shouldInherit?: boolean;
	redirect?: boolean;
	/**
	 * Container's scaling replicas
	 */
	replicas?: number;
	/**
	 * Container's port
	 */
	port?: number;
	basePath?: string;
	domains?: string[];
	cdn?: boolean;
	ssl?: "letsencrypt" | "custom" | "none";
	tlsSecret?: string;
	cliVersion?: string;
	/**
	 * Content of namespace YAML file
	 */
	namespaceYaml?: string;
	/**
	 * Content of deployment YAML file
	 */
	deploymentYaml?: string;
	/**
	 * Content of prerelease deployment YAML file
	 */
	prereleaseDeploymentYaml?: string;
	/**
	 * Prerelease endpoint URL
	 */
	prereleaseUrl?: string;
	/**
	 * Collection array of environment variables
	 */
	envVars?: KubeEnvironmentVariable[];
}

export interface ICloudProvider extends IGeneral {
	name?: string;

	/**
	 * Cloud provider short name, without spacing & special characters
	 */
	shortName?: string;

	// @Column({ default: [] })
	// ips?: string[];

	// @Column({ default: [] })
	// domains?: string[];

	/**
	 * Content of the API access token to use services on this cloud provider
	 * - Apply for: Digital Ocean
	 */
	apiAccessToken?: string;

	/**
	 * Content of the Service Account credentials ti access services on this cloud provider
	 * - Apply for: Google Cloud, AWS,...
	 * - For example: Kubernetes Clusters, Single Sign-On,...
	 */
	serviceAccount?: string;

	/**
	 * List of available clusters on this provider
	 */
	clusters?: string[] | ICluster[];

	/**
	 * User ID of the owner
	 *
	 * @remarks This can be populated to {User} data
	 */
	owner?: IUser | string;

	/**
	 * ID of the workspace
	 *
	 * @remarks This can be populated to {Workspace} data
	 */
	workspace?: IWorkspace | string;
}

export interface ICluster extends IGeneral {
	name?: string;

	/**
	 * Cluster slug
	 */
	slug?: string;

	/**
	 * Cluster short name (to access via `kubectl context`)
	 */
	shortName?: string;

	/**
	 * Cloud provider of this cluster
	 */
	provider?: ICloudProvider;

	/**
	 * Short name of the cloud provider
	 */
	providerShortName?: string;

	/**
	 * Cloud zone of this cluster
	 */
	zone?: string;

	/**
	 * Cloud region of this cluster
	 */
	region?: string;

	/**
	 * [GOOGLE ONLY] Project ID of this cluster
	 *
	 * @remarks This is not a project ID of BUILD SERVER database
	 */
	projectID?: string;

	/**
	 * The PRIMARY domain of this cluster
	 */
	primaryDomain?: string;

	/**
	 * The PRIMARY IP ADDRESS of this cluster, or IP ADDRESS of the LOAD BALANCER
	 */
	primaryIP?: string;

	/**
	 * Alternative domains or project's domains of this cluster
	 */
	domains?: string[];

	/**
	 * The KUBECONFIG data to access to this cluster
	 */
	kubeConfig?: string;

	/**
	 * Content of the Service Account credentials to access this cluster
	 */
	serviceAccount?: string;

	/**
	 * Content of the API ACCESS TOKEN to access this cluster
	 */
	apiAccessToken?: string;

	/**
	 * User ID of the owner
	 *
	 * @remarks This can be populated to {User} data
	 */
	owner?: IUser | string;

	/**
	 * ID of the workspace
	 *
	 * @remarks This can be populated to {Workspace} data
	 */
	workspace?: IWorkspace | string;
}

export interface IApp extends IGeneral {
	/**
	 * @deprecated
	 */
	environment?: { [key: string]: IAppEnvironment };
	deployEnvironment?: { [key: string]: IAppEnvironment };

	git?: string;
	latestBuild?: string;
	name?: string;

	project?: IProject | string;

	/**
	 * User ID of the owner
	 *
	 * @remarks This can be populated to {User} data
	 */
	owner?: IUser | string;

	/**
	 * ID of the workspace
	 *
	 * @remarks This can be populated to {Workspace} data
	 */
	workspace?: IWorkspace | string;
}

export interface IProject extends IGeneral {
	name?: string;
	slug?: string;
	updatedAt?: string;
	apps?: IApp[];
	/**
	 * User ID of the owner
	 *
	 * @remarks This can be populated to {User} data
	 */
	owner?: IUser | string;

	/**
	 * ID of the workspace
	 *
	 * @remarks This can be populated to {Workspace} data
	 */
	workspace?: IWorkspace | string;
}

export interface IBuild extends IGeneral {
	name?: string;
	image?: string;
	slug?: string;
	env?: string;
	branch?: string;
	logs?: string;
	createdBy?: string;
	status?: "start" | "building" | "failed" | "success";
	projectSlug?: string;
	appSlug?: string;

	/**
	 * ID of the app
	 *
	 * @remarks This can be populated to {Project} data
	 */
	app?: IApp | string;

	/**
	 * User ID of the owner
	 *
	 * @remarks This can be populated to {User} data
	 */
	owner?: IUser | string;

	/**
	 * ID of the project
	 *
	 * @remarks This can be populated to {Project} data
	 */
	project?: IProject | string;

	/**
	 * ID of the workspace
	 *
	 * @remarks This can be populated to {Workspace} data
	 */
	workspace?: IWorkspace | string;
}

export interface IRelease extends IGeneral {
	name?: string;
	image?: string;
	env?: any[] | string;
	diginext?: any;
	namespace?: string;
	prodYaml?: string;
	preYaml?: string;
	prereleaseUrl?: string;
	productionUrl?: string;
	createdBy?: string;
	branch?: string;
	provider?: string;

	/**
	 * Short name of the targeted cluster to deploy to.
	 */
	cluster?: string;
	projectSlug?: string;
	appSlug?: string;
	providerProjectId?: string;
	buildStatus?: "start" | "building" | "failed" | "success";
	active?: boolean;

	/**
	 * ID of the app
	 *
	 * @remarks This can be populated to {Project} data
	 */
	app?: IApp | string;

	/**
	 * User ID of the owner
	 *
	 * @remarks This can be populated to {User} data
	 */
	owner?: IUser | string;

	/**
	 * ID of the project
	 *
	 * @remarks This can be populated to {Project} data
	 */
	project?: IProject | string;

	/**
	 * ID of the workspace
	 *
	 * @remarks This can be populated to {Workspace} data
	 */
	workspace?: IWorkspace | string;
}
